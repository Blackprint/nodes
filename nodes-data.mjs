/* Blackprint 
 MIT Licensed */
"use strict";var _Class,_Class2,_Class3,_Class4,_Class5,_Class6,_Class7,_Class8,_Class9,_Class0,_Class1,_Class10,_Class11,_Class12,_Class13,_Class14,_Class15,_Class16,_Class17,_Class18,_Class19,_Class20,_Class21,_Class22,_Class23,_Class24,_Class25,_Class26,_Class27,_Class28,_Class29,_Class30,_Class31,_Class32,_Class33,_Class34,_Class35,_Class36,_Class37,_Class38,_Class39,_Class40,_Class41,_Class42,_Class43,_Class44,_Class45,_Class46,_Class47,_Class48,_Class49,_Class50,_Class51,_Class52,_Class53,_Class54,_Class55,_Class56,_Class57,_Class58,_Class59,_Class60,_Class61,_Class62,_Class63,_NumFixed,_NumString,_Class64,_Class65,_Class66,_Class67,_Class68,_Class69,_Class70,_Class71,_Class72,_Class73,_Class74,_Class75,_LowerCase,_Str2Number,_Str2RegExp,_UpperCase;function _classPrivateFieldLooseBase(t,e){if(!{}.hasOwnProperty.call(t,e))throw new TypeError("attempted to use private field on non-instance");return t}var id=0;function _classPrivateFieldLooseKey(t){return"__private_"+id+++"_"+t}if(void 0===window)var window=globalThis;async function imports(t){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(t):Promise.all(t.map(t=>import(t)))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasInterface:!0,hasDocs:!0}),Context=Blackprint.createContext("Data");Context.EventSlot={slot:"my-private-event-slot"};let $=globalThis.sf?.$;Blackprint.Environment.isBrowser||($=()=>[]),Blackprint.registerInterface("BPIC/Data/Minimal",Context.IFace.DataMinimal=class extends Blackprint.Interface{});let NodeToast=Context.NodeToast=class{constructor(t){this.iface=t,this._have=!1}clear(){!1!==this._have&&(this.haveInfo&&this.haveInfo.destroy(),this.haveWarn&&this.haveWarn.destroy(),this.haveError&&this.haveError.destroy(),this.haveInfo=!1,this.haveWarn=!1,this.haveError=!1)}_reduceText(t){return this._have=!0,t.replace(/\w{15,}/g,t=>t.slice(0,5)+"...")}info(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveInfo?this.haveInfo.text=t:this.haveInfo=this.iface.$decoration.info(t),this.haveInfo._raw=e}warn(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveWarn?this.haveWarn.text=t:this.haveWarn=this.iface.$decoration.warn(t),this.haveWarn._raw=e}error(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveError?this.haveError.text=t:this.haveError=this.iface.$decoration.error(t),this.haveError._raw=e}success(t){if(!this.iface.$decoration)return;this.iface.$decoration.success(this._reduceText(t))._raw=t}};Blackprint.registerNode("Data/Array/Contains",((_Class=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="IndexOf",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref,a=t.Array;if(null==a)return this._toast.warn("Array must not be null");e.Exist=a.includes(t.Item)}}).input={Array:Array,Item:Blackprint.Types.Any},_Class.output={Exist:Boolean},_Class)),Blackprint.registerNode("Data/Array/Create",((_Class2=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Create Array"}init(){let t=this,e=this.iface;var a=[{title:"Create input port",callback(){t.createPort("input",String(e.data.length),Blackprint.Types.Any),e.data.length++,t.update(),t.notifyEditorDataChanged()}},{title:"Delete port",callback(){if(0===e.data.length)throw new Error("There's no input port");t.deletePort("input",this.name),e.data.length--;let a=0,s=e.input;for(let t in s)s[t].name=String(a++);t.update(),t.notifyEditorDataChanged()}}];e.on("port.menu",Context.EventSlot,function({port:t,menu:e}){a[0].context=t,e.push(a[0]),"output"!==t.source&&(a[1].context=t,e.push(a[1]))}),this.update()}imported(t){let e=this.iface;if(null!=t){this.deletePort("input","0"),e.data=t;for(let e=0;e<t.length;e++)this.createPort("input",e,Blackprint.Types.Any)}else e.data={length:1}}update(){let{Input:t,Output:e}=this.ref;0!==this.iface.data.length?e.Array=Object.values(t):e.Array=[]}}).input={0:Blackprint.Types.Any},_Class2.output={Array:Array},_Class2)),Blackprint.registerNode("Data/Array/IndexOf",((_Class3=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="IndexOf",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref,a=t.Array;if(null==a)return this._toast.warn("Array must not be null");e.Index=a.indexOf(t.Item)}}).input={Array:Array,Item:Blackprint.Types.Any},_Class3.output={Index:Number},_Class3)),Blackprint.registerNode("Data/Array/Insert",((_Class4=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Insert",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref,a=t.Array;return null==a||null==t.Index?this._toast.warn("Array or Index must not be null"):null==t.Item?this._toast.warn("Item must not be null"):void a.splice(t.Index,0,t.Item)}}).input={Array:Array,Index:Number,Item:Blackprint.Types.Any},_Class4)),Blackprint.registerNode("Data/Array/Length",((_Class5=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Length",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Array)return this._toast.warn("Array must not be null");e.Length=t.Array.Length}}).input={Array:Array},_Class5.output={Length:Number},_Class5)),Blackprint.registerNode("Data/Array/Pop",((_Class6=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Pop an Array",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref,a=t.Array;if(null==a||0===a.length)return this._toast.warn("Empty array");e.Value=a.pop()}}).input={Array:Array},_Class6.output={Value:Blackprint.Types.Any},_Class6)),Blackprint.registerNode("Data/Array/Push",((_Class7=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Push to Array",this._toast=new NodeToast(this)}update(){let{Input:t}=this.ref,e=t.Array;if(null==e)return this._toast.warn("Array must not be null");e.push(t.Data)}}).input={Array:Array,Data:Blackprint.Types.Any},_Class7)),Blackprint.registerNode("Data/Array/RemoveAt",((_Class8=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="RemoveAt",this._toast=new NodeToast(this)}update(){let{Input:t}=this.ref;if(null==t.Array||null==t.Index||null==t.DeleteCount)return this._toast.warn("Array, Index, or DeleteCount must not be null");t.Array.splice(t.Index,t.DeleteCount)}}).input={Array:Array,Index:Number,DeleteCount:Blackprint.Port.Default(Number,1)},_Class8)),Blackprint.registerNode("Data/Array/Shift",((_Class9=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Shift an Array",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref,a=t.Array;if(null==a||0===a.length)return this._toast.warn("Empty array");e.Value=a.shift()}}).input={Array:Array},_Class9.output={Value:Blackprint.Types.Any},_Class9)),Blackprint.registerNode("Data/Array/Unshift",((_Class0=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Unshift to Array",this._toast=new NodeToast(this)}update(){let{Input:t}=this.ref,e=t.Array;if(null==e)return this._toast.warn("Array must not be null");e.unshift(t.Data)}}).input={Array:Array,Data:Blackprint.Types.Any},_Class0)),Blackprint.registerNode("Data/Boolean/Invert",((_Class1=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Invert Boolean"}createIcon(){return document.createTextNode("Invert")}update(){let t=this.ref;t.Output.Value=!t.Input.Value}}).input={Value:Boolean},_Class1.output={Value:Boolean},_Class1.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class1)),Blackprint.registerNode("Data/Map/Create",((_Class10=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Create Map"}init(){let{Output:t}=this.ref;t.Map=new Map}}).output={Map:Map},_Class10)),Blackprint.registerNode("Data/Map/Has",((_Class11=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Map has key",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Map||null==t.Key)return this._toast.warn("Map or Key must not be null");e.Exist=t.Map.has(t.Key)}}).input={Map:Map,Key:Blackprint.Types.Any},_Class11.output={Exist:Boolean},_Class11)),Blackprint.registerNode("Data/Map/Set",((_Class12=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set Data",this._toast=new NodeToast(this)}update(){let{Input:t}=this.ref;if(null==t.Map||null==t.Key||null==t.Value)return this._toast.warn("Map, Key, or Value must not be null");t.Map.set(t.Key,t.Value)}}).input={Map:Map,Key:Blackprint.Types.Any,Value:Blackprint.Types.Any},_Class12)),Blackprint.registerNode("Data/Number/Add",((_Class13=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Add"}createIcon(){return $('<i class="fa fa-plus"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e+a)}}).input={A:Number,B:Number},_Class13.output={Value:Number},_Class13.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class13)),Blackprint.registerNode("Data/Number/Divide",((_Class14=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Divide"}createIcon(){return $('<i class="fa fa-divide"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e/a)}}).input={A:Number,B:Number},_Class14.output={Value:Number},_Class14.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class14)),Blackprint.registerNode("Data/Number/Modulo",((_Class15=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Modulo"}createIcon(){return $('<i class="fa fa-percentage"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e%a)}}).input={A:Number,B:Number},_Class15.output={Value:Number},_Class15.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class15)),Blackprint.registerNode("Data/Number/Multiply",((_Class16=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Multiply"}createIcon(){return $('<i class="fa fa-asterisk"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e*a)}}).input={A:Number,B:Number},_Class16.output={Value:Number},_Class16.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class16)),Blackprint.registerNode("Data/Number/PowerOf",((_Class17=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: PowerOf"}createIcon(){return $('<i class="fa fa-superscript"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e**a)}}).input={A:Number,B:Number},_Class17.output={Value:Number},_Class17.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class17)),Blackprint.registerNode("Data/Number/Subtract",((_Class18=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Subtract"}createIcon(){return $('<i class="fa fa-minus"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e-a)}}).input={A:Number,B:Number},_Class18.output={Value:Number},_Class18.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class18)),Blackprint.registerNode("Data/Object/Create",((_Class19=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Create Object"}init(){let t=this,e=this.iface;var a=[{title:"Create input port",async callback(){let{value:a}=await BPEditor.Dialog({title:"Enter field name",input:"text"});a&&(t.createPort("input",a,Blackprint.Types.Any),e.data.list.push(a),t.update(),t.notifyEditorDataChanged())}},{title:"Delete port",callback(){t.deletePort("input",this.name);let a=e.data.list,s=a.indexOf(this.name);-1!==s&&(a.splice(s,1),t.update()),t.notifyEditorDataChanged()}}];e.on("port.menu",Context.EventSlot,function({port:t,menu:e}){for(var s=0;s<a.length;s++)a[s].context=t;e.push(...a)}),this.update()}imported(t){let e=this.iface;if(null==t)return void(e.data={list:["key"]});this.deletePort("input","key"),e.data=t;let a=t.list;for(let t=0;t<a.length;t++)this.createPort("input",a[t],Blackprint.Types.Any)}update(){let{Input:t,Output:e}=this.ref;0!==this.iface.data.length?e.Object=Object.assign({},t):e.Object={}}}).input={key:Blackprint.Types.Any},_Class19.output={Object:Object},_Class19)),Blackprint.registerNode("Data/Object/Deconstructor",((_Class20=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Decontructor",this._toast=new NodeToast(e),e.exportData=this.exportData}imported(t){if(null==t?.output)return;let e=t.output;for(let t=0;t<e.length;t++){this.createPort("output",e[t],Blackprint.Types.Slot)._uninit_=!0}}init(){this.refreshTypes(),this._refreshTrigger=()=>this.refreshTypes(),this.ref.IInput.In.on("connecting",this._refreshTrigger),this.ref.IInput.In.on("disconnect",({target:t})=>{null!=t&&t.off("type.assigned",this._refreshTrigger)})}exportData(){return{output:Object.keys(this.ref.IOutput)}}refreshTypes(){let{IInput:t,IOutput:e}=this.ref,a=t.In.cables[0]?.output;if(null==a)return;if(a._uninit_)return void a.once("type.assigned",this._refreshTrigger);let{struct:s,feature:r}=a;if(r!==Blackprint.Port.StructOf)throw t.In.disconnectAll(),new Error("Deconstructor can only be used for output port type with 'Port.StructOf' feature");if(null==this._struct){this._struct=s;for(let t in e){let a=s[t]?.type;if(null==a)this.deletePort("output",t);else{let s=e[t];s.assignType(a),s._uninit_=!1}}for(let t in s)null==e[t]&&this.createPort("output",t,s[t].type)}else if(this._struct!==s)throw t.In.disconnectAll(),new Error("The new connected port structure is different with old structure object")}}).input={In:Object},_Class20.output={},_Class20)),Blackprint.registerCode("Data/String/Add",((_Class21=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,code:"Output.Result = Input.A + Input.B;"}}python(t){return{type:Blackprint.CodeType.NotWrapped,code:"Output['Result'] = Input['A'] + Input['B']"}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class21.routeOut=Blackprint.CodeRoute.MustHave,_Class21)),Blackprint.registerNode("Data/String/Add",((_Class22=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="String: Add"}createIcon(){return $('<i class="fa fa-plus"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e+a)}}).input={A:String,B:String},_Class22.output={Result:String},_Class22.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class22)),Blackprint.registerNode("Data/String/CharAt",((_Class23=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Char At"}update(){let t=this.ref,{String:e,Index:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.charAt(a))}}).input={String:String,Index:Number},_Class23.output={Result:String},_Class23.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class23)),Blackprint.registerNode("Data/String/CodePointAt",((_Class24=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Code Point At"}update(){let t=this.ref,{String:e,Index:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.codePointAt(a))}}).input={String:String,Index:Number},_Class24.output={Result:Number},_Class24.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class24)),Blackprint.registerNode("Data/String/EndsWith",((_Class25=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Ends With"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.endsWith(a))}}).input={Haystack:String,Needle:String},_Class25.output={Result:Boolean},_Class25.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class25)),Blackprint.registerNode("Data/String/Includes",((_Class26=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Includes"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.IsExist=e.includes(a))}}).input={Haystack:String,Needle:String},_Class26.output={IsExist:Boolean},_Class26.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class26)),Blackprint.registerNode("Data/String/IndexOf",((_Class27=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Index Of"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Index=e.indexOf(a))}}).input={Haystack:String,Needle:String},_Class27.output={Index:Number},_Class27.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class27)),Blackprint.registerNode("Data/String/LastIndexOf",((_Class28=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Last Index Of"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Index=e.lastIndexOf(a))}}).input={Haystack:String,Needle:String},_Class28.output={Index:Number},_Class28.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class28)),Blackprint.registerNode("Data/String/Length",((_Class29=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="String: Length",e.w=95}createIcon(){return document.createTextNode("Length")}update(){let t=this.ref,{String:e}=t.Input;null!=e&&(t.Output.Length=e.length)}}).input={String:String},_Class29.output={Length:Number},_Class29.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class29)),Blackprint.registerNode("Data/String/Match",((_Class30=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Match"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Matches=e.match(a))}}).input={Haystack:String,Needle:RegExp},_Class30.output={Matches:Array},_Class30)),Blackprint.registerNode("Data/String/Repeat",((_Class31=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Repeat"}update(){let t=this.ref,{String:e,Count:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.repeat(a))}}).input={String:String,Count:Number},_Class31.output={Result:String},_Class31.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class31)),Blackprint.registerNode("Data/String/Replace",((_Class32=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Replace"}update(){let t=this.ref,{Haystack:e,Needle:a,Replacement:s}=t.Input;null!=e&&null!=a&&null!=s&&(t.Output.Result=e.replace(a,s))}}).input={Haystack:String,Needle:Blackprint.Port.Union([RegExp,String]),Replacement:String},_Class32.output={Result:String},_Class32.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class32)),Blackprint.registerNode("Data/String/Search",((_Class33=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Search"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Index=e.search(a))}}).input={Haystack:String,Needle:Blackprint.Port.Union([String,RegExp])},_Class33.output={Index:Number},_Class33.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class33)),Blackprint.registerNode("Data/String/Slice",((_Class34=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Slice"}update(){let t=this.ref,{String:e,Begin:a,End:s}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.slice(a,s))}}).input={String:String,Begin:Number,End:Number},_Class34.output={Result:String},_Class34.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class34)),Blackprint.registerNode("Data/String/Split",((_Class35=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Split"}update(){let t=this.ref,{String:e,Splitter:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.split(a))}}).input={String:String,Splitter:Blackprint.Port.Union([RegExp,String])},_Class35.output={Result:String},_Class35.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class35)),Blackprint.registerNode("Data/String/StartsWith",((_Class36=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Starts With"}update(){let t=this.ref,{Haystack:e,Needle:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.startsWith(a))}}).input={Haystack:String,Needle:String},_Class36.output={Result:Boolean},_Class36.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class36)),Blackprint.registerNode("Data/String/Trim",((_Class37=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Trim"}update(){let t=this.ref,{String:e}=t.Input;null!=e&&(t.Output.Result=e.trim())}}).input={String:String},_Class37.output={Result:String},_Class37.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class37)),Blackprint.registerNode("Data/Any/To/Trigger",((_Class38=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Trigger on any data changes"}createIcon(){return document.createTextNode("Call()")}update(){this.ref.Output.Call()}}).input={Value:Blackprint.Types.Any},_Class38.output={Call:Blackprint.Types.Trigger},_Class38)),Blackprint.registerCode("Data/Boolean/Compare/And",((_Class39=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,code:'Output.Value = Input["0"] && Input["1"];'}}csharp(t){return this.php(t)}php(t){return{type:Blackprint.CodeType.NotWrapped,code:'Output["Value"] = Input["0"] && Input["1"];'}}python(t){return{type:Blackprint.CodeType.NotWrapped,code:'Output["Value"] = Input["0"] and Input["1"]'}}golang(t){return{code:'Output.Set("Value", Input.Get("0").(bool) && Input.Get("1").(bool))'}}rust(t){return{code:'output.set("Value", input.get::<bool>("0").unwrap() && input.get::<bool>("1").unwrap());'}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class39.routeOut=Blackprint.CodeRoute.MustHave,_Class39.isAsync=!0,_Class39)),Blackprint.registerNode("Data/Boolean/Compare/And",((_Class40=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Boolean: And"}createIcon(){return document.createTextNode("And")}update(){let t=this.ref;t.Output.Value=t.Input[0]&&t.Input[1]}}).input={0:Boolean,1:Boolean},_Class40.output={Value:Boolean},_Class40.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class40)),Blackprint.registerCode("Data/Boolean/Compare/Or",((_Class41=class extends Blackprint.Code{js(t){return{code:'Output.Value = Input["0"] || Input["1"];'}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class41.routeOut=Blackprint.CodeRoute.MustHave,_Class41)),Blackprint.registerNode("Data/Boolean/Compare/Or",((_Class42=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Boolean: Or"}createIcon(){return document.createTextNode("Or")}update(){let t=this.ref;t.Output.Value=t.Input[0]||t.Input[1]}}).input={0:Boolean,1:Boolean},_Class42.output={Value:Boolean},_Class42.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class42)),Blackprint.registerCode("Data/Boolean/Compare/Xor",((_Class43=class extends Blackprint.Code{js(t){return{code:'Output.Value = Input["0"] !== Input["1"];'}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class43.routeOut=Blackprint.CodeRoute.MustHave,_Class43)),Blackprint.registerNode("Data/Boolean/Compare/Xor",((_Class44=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Boolean: Xor"}createIcon(){return document.createTextNode("Xor")}update(){let t=this.ref;t.Output.Value=t.Input[0]!==t.Input[1]}}).input={0:Boolean,1:Boolean},_Class44.output={Value:Boolean},_Class44.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class44)),Blackprint.registerCode("Data/Boolean/To/Route",((_Class45=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,code:`if(Input.Value === ${JSON.stringify(this.iface.data.signal)}) await Output.Route();`}}python(t){return{type:Blackprint.CodeType.NotWrapped,code:`if(Input['Value'] == ${JSON.stringify(this.iface.data.signal)?"True":"False"}): Output['Route']()`}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class45.routeOut=Blackprint.CodeRoute.Optional,_Class45)),Blackprint.registerNode("Data/Boolean/To/Route",((_Class46=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Route on true",e.data={signal:!0}}createIcon(){return document.createTextNode("Route ➤")}update(){this.ref.Input.Value===this.iface.data.signal&&this.ref.Output.Route()}}).input={Value:Boolean},_Class46.output={Route:Blackprint.Types.Route},_Class46.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class46)),Blackprint.registerCode("Data/Boolean/To/Trigger",((_Class47=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,code:`if(Input.Value === ${JSON.stringify(this.iface.data.signal)}) await Output.Call();`}}python(t){return{type:Blackprint.CodeType.NotWrapped,code:`if(Input["Value"] == ${this.iface.data.signal?"True":"False"}): Output["Call"]()`}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class47.routeOut=Blackprint.CodeRoute.Optional,_Class47)),Blackprint.registerNode("Data/Boolean/To/Trigger",((_Class48=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Trigger on true",e.data={signal:!0}}createIcon(){return document.createTextNode("Call()")}update(){this.ref.Input.Value===this.iface.data.signal&&this.ref.Output.Call()}}).input={Value:Boolean},_Class48.output={Call:Blackprint.Types.Trigger},_Class48.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class48)),Blackprint.registerNode("Data/Map/Get/Keys",((_Class49=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Keys",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Map)return this._toast.warn("Map must not be null");e.Keys=[...t.Map.keys()]}}).input={Map:Map},_Class49.output={Keys:Array},_Class49)),Blackprint.registerNode("Data/Map/Get/Size",((_Class50=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Size",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Map)return this._toast.warn("Map must not be null");e.Size=t.Map.size}}).input={Map:Map},_Class50.output={Size:Number},_Class50)),Blackprint.registerNode("Data/Map/Get/Value",((_Class51=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Value",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Map)return this._toast.warn("Map must not be null");e.Value=t.Map.get(t.Key)}}).input={Map:Map,Key:Blackprint.Types.Any},_Class51.output={Value:Blackprint.Types.Any},_Class51)),Blackprint.registerNode("Data/Map/Get/Values",((_Class52=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Values",this._toast=new NodeToast(this)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Map)return this._toast.warn("Map must not be null");e.Values=[...t.Map.values()]}}).input={Map:Map},_Class52.output={Values:Array},_Class52)),Blackprint.registerNode("Data/Number/Binary/And",((_Class53=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Binary: And",e.w=95}createIcon(){return document.createTextNode("Bin And")}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e&a)}}).input={A:Number,B:Number},_Class53.output={Value:Number},_Class53.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class53)),Blackprint.registerNode("Data/Number/Binary/Or",((_Class54=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Binary: Or",e.w=95}createIcon(){return document.createTextNode("Bin Or")}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e|a)}}).input={A:Number,B:Number},_Class54.output={Value:Number},_Class54.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class54)),Blackprint.registerNode("Data/Number/Binary/ShiftLeft",((_Class55=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Binary: ShiftLeft"}createIcon(){return $('<i class="fa fa-angle-double-left"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e<<a)}}).input={A:Number,B:Number},_Class55.output={Value:Number},_Class55.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class55)),Blackprint.registerNode("Data/Number/Binary/ShiftRight",((_Class56=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Binary: ShiftRight"}createIcon(){return $('<i class="fa fa-angle-double-right"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e>>a)}}).input={A:Number,B:Number},_Class56.output={Value:Number},_Class56.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class56)),Blackprint.registerNode("Data/Number/Binary/Xor",((_Class57=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Binary: Xor",e.w=95}createIcon(){return document.createTextNode("Bin Xor")}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e^a)}}).input={A:Number,B:Number},_Class57.output={Value:Number},_Class57.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class57)),Blackprint.registerNode("Data/Number/Compare/Equal",((_Class58=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Equal"}createIcon(){return $('<i class="fa fa-equals"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e===a)}}).input={A:Number,B:Number},_Class58.output={Value:Boolean},_Class58.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class58)),Blackprint.registerNode("Data/Number/Compare/LessThanOrEqual",((_Class59=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Less Than or Equal"}createIcon(){return $('<i class="fa fa-less-than-equal"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e<=a)}}).input={A:Number,B:Number},_Class59.output={Value:Boolean},_Class59.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class59)),Blackprint.registerNode("Data/Number/Compare/LessThan",((_Class60=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Less Than"}createIcon(){return $('<i class="fa fa-less-than"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e<a)}}).input={A:Number,B:Number},_Class60.output={Value:Boolean},_Class60.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class60)),Blackprint.registerNode("Data/Number/Compare/MoreThanOrEqual",((_Class61=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: More Than or Equal"}createIcon(){return $('<i class="fa fa-more-than-equal"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e>=a)}}).input={A:Number,B:Number},_Class61.output={Value:Boolean},_Class61.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class61)),Blackprint.registerNode("Data/Number/Compare/MoreThan",((_Class62=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: More Than"}createIcon(){return $('<i class="fa fa-more-than"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e>a)}}).input={A:Number,B:Number},_Class62.output={Value:Boolean},_Class62.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class62)),Blackprint.registerNode("Data/Number/Compare/NotEqual",((_Class63=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Number: Not Equal"}createIcon(){return $('<i class="fa fa-not-equal"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e!==a)}}).input={A:Number,B:Number},_Class63.output={Value:Boolean},_Class63.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class63)),Blackprint.registerNode("Data/Number/To/Fixed",((_NumFixed=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="To Fixed"}update(){let t=this.ref,{In:e,Precision:a}=t.Input;null!=e&&(t.Output.Out=Number(e.toFixed(a)))}}).input={In:Number,Precision:Number},_NumFixed.output={Out:Number},_NumFixed.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_NumFixed)),Blackprint.registerNode("Data/Number/To/String",((_NumString=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="Number to String",e.showPortName=!0}createIcon(){return $('<i class="fa fa-magic"></i>')[0]}update(){let t=this.ref,{In:e,Radix:a}=t.Input;null!=e&&(t.Output.Out=e.toString(a))}}).input={In:Number,Radix:Number},_NumString.output={Out:String},_NumString.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_NumString)),Blackprint.registerNode("Data/Object/Get/Keys",((_Class64=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Object Keys"}update(){let{Input:t,Output:e}=this.ref;e.Keys=Object.keys(t.Object)}}).input={Object:Object},_Class64.output={Keys:Array},_Class64)),Blackprint.registerNode("Data/Object/Get/Value",(_Class65=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Object/Get/Value").title="Get Object Value",this.hasFieldData=!1,this.hasFieldCable=!1}init(){let{IInput:t,Output:e}=this.ref;t.Object.on("disconnect",Context.EventSlot,()=>e.Value=null),t.Field.on("disconnect",Context.EventSlot,()=>this.hasFieldCable=!1),t.Field.on("connect",Context.EventSlot,()=>this.hasFieldCable=!0),t.Field.default&&(this.hasFieldData=!0)}update(){let{Input:t,Output:e}=this.ref,{Object:a,Field:s}=t;if(null==a)return this.hasFieldData=!!s,this.iface._toast.warn("Object can't be null or undefined");if(s)return this.iface._toast.clear(),this.hasFieldData=!0,void(e.Value=a[s]);if(this.hasFieldCable)return this.iface._toast.error("Field can't be empty string"),void(this.hasFieldData=!1);this.hasFieldData=!1;let r=null;try{if(null==this._getter)return;r=this._getter(a)}catch(t){if("Cannot read properties of"===t.message.includes)return void(e.Value=null);this.iface._toast.error(t.message)}e.Value=r,this.iface._toast.clear()}imported(t){Object.assign(this.iface.data,t)}recreateFunc(t){if(""===t)return this._getter=null;if(/[`~!@#$%^&*()\-=+{}|\\;:,<>/?]/.test(t))return this.iface._toast.error("Can't use symbol when destructuring properties");t="["===t.slice(0,1)?`_a_${t}`:`_a_.${t}`,this.iface._toast.clear();try{this._getter=Function("_a_","return "+t)}catch(t){if(t.message.includes("Unexpected token"))return void this.iface._toast.warn("...?")}this.update()}syncIn(t,e){"props"===t&&(this.iface.props=e)}},_Class65.input={Object:Object,Field:String},_Class65.output={Value:Blackprint.Types.Any},_Class65)),Blackprint.registerInterface("BPIC/Data/Object/Get/Value",Context.IFace.GetValue=class extends Blackprint.Interface{constructor(t){super(t),this._toast=new NodeToast(this),this.data=new DataObjectGetValueData(this)}});var _iface=_classPrivateFieldLooseKey("iface"),_props=_classPrivateFieldLooseKey("props");class DataObjectGetValueData{constructor(t){Object.defineProperty(this,_iface,{writable:!0,value:null}),Object.defineProperty(this,_props,{writable:!0,value:""}),_classPrivateFieldLooseBase(this,_iface)[_iface]=t,_classPrivateFieldLooseBase(this,_props)[_props]=""}get props(){return _classPrivateFieldLooseBase(this,_props)[_props]}set props(t){_classPrivateFieldLooseBase(this,_props)[_props]=t;let e=_classPrivateFieldLooseBase(this,_iface)[_iface].node;e.recreateFunc(t),e.syncOut("props",t),e.notifyEditorDataChanged()}}Blackprint.utils.setEnumerablePrototype(DataObjectGetValueData,{props:!0}),Blackprint.registerNode("Data/Object/Get/Values",((_Class66=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get Object Values"}update(){let{Input:t,Output:e}=this.ref;e.Values=Object.values(t.Object)}}).input={Object:Object},_Class66.output={Values:Array},_Class66)),Blackprint.registerNode("Data/Object/Set/Value",((_Class67=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set Object Value",this._toast=new NodeToast(this)}update(){let{Input:t}=this.ref;if(!t.Object||!t.Field)return this._toast.warn("Object or Field can't be null or empty");t.Object[t.Field]=t.Value}}).input={Object:Object,Field:String,Value:Blackprint.Types.Any},_Class67)),Blackprint.registerCode("Data/Route/From/Callback",((_Class68=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,input:{Value:"await Output.Route()"},code:""}}python(t){return{type:Blackprint.CodeType.NotWrapped,input:{Value:"Output['Route']()"},code:""}}}).routeIn=Blackprint.CodeRoute.None,_Class68.routeOut=Blackprint.CodeRoute.None,_Class68)),Blackprint.registerNode("Data/Route/From/Callback",((_Class69=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Route on Call"}createIcon(){return document.createTextNode("Route ➤")}}).input={Value:Blackprint.Port.Trigger(t=>t.iface.ref.Output.Route())},_Class69.output={Route:Blackprint.Types.Route},_Class69)),Blackprint.registerCode("Data/Route/To/Trigger",((_Class70=class extends Blackprint.Code{js(t){return{type:Blackprint.CodeType.NotWrapped,code:"return await Output.Call();"}}python(t){return{type:Blackprint.CodeType.NotWrapped,code:"return Output['Call']()"}}}).routeIn=Blackprint.CodeRoute.MustHave,_Class70.routeOut=Blackprint.CodeRoute.Optional,_Class70)),Blackprint.registerNode("Data/Route/To/Trigger",((_Class71=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="Route to trigger"}createIcon(){return document.createTextNode("Call()")}update(){this.ref.Output.Call()}}).output={Call:Blackprint.Types.Trigger},_Class71)),Blackprint.registerNode("Data/String/Compare/Equal",((_Class72=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="String: Equal"}createIcon(){return $('<i class="fa fa-equals"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e===a)}}).input={A:String,B:String},_Class72.output={Value:Boolean},_Class72.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class72)),Blackprint.registerNode("Data/String/Compare/NotEqual",((_Class73=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Data/Minimal").title="String: Not Equal"}createIcon(){return $('<i class="fa fa-not-equal"></i>')[0]}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Value=e!==a)}}).input={A:String,B:String},_Class73.output={Value:Boolean},_Class73.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class73)),Blackprint.registerNode("Data/String/Padding/End",((_Class74=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Padding End"}update(){let t=this.ref,{A:e,Length:a,Filler:s}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.padEnd(a,s))}}).input={A:String,Length:Number,Filler:String},_Class74.output={Result:String},_Class74.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class74)),Blackprint.registerNode("Data/String/Padding/Start",((_Class75=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Padding Start"}update(){let t=this.ref,{A:e,B:a}=t.Input;null!=e&&null!=a&&(t.Output.Result=e.padStart(a))}}).input={A:String,B:Number},_Class75.output={Result:String},_Class75.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Class75)),Blackprint.registerNode("Data/String/To/LowerCase",((_LowerCase=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="To LowerCase"}update(){let t=this.ref,{In:e}=t.Input;null!=e&&(t.Output.Out=e.toUpperCase())}}).input={In:String},_LowerCase.output={Out:String},_LowerCase.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_LowerCase)),Blackprint.registerNode("Data/String/To/Number",((_Str2Number=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Data/Minimal");e.title="String to Number",this._toast=new NodeToast(e)}createIcon(){return $('<i class="fa fa-magic"></i>')[0]}update(){let t=this.ref,{In:e}=t.Input;if(null==e)return;let a=Number(e);Number.isNaN(a)?this._toast.error(`"${e}" is not a number`):(this._toast.clear(),t.Output.Out=a)}}).input={In:String},_Str2Number.output={Out:Number},_Str2Number.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Str2Number)),Blackprint.registerNode("Data/String/To/RegExp",((_Str2RegExp=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="To RegExp"}update(){let t=this.ref,{In:e,Options:a}=t.Input;null!=e&&(t.Output.Out=RegExp(e,a))}}).input={In:String,Options:String},_Str2RegExp.output={Out:RegExp},_Str2RegExp.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_Str2RegExp)),Blackprint.registerNode("Data/String/To/UpperCase",((_UpperCase=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="To UpperCase"}update(){let t=this.ref,{In:e}=t.Input;null!=e&&(t.Output.Out=e.toUpperCase())}}).input={In:String},_UpperCase.output={Out:String},_UpperCase.initUpdate=0|Blackprint.InitUpdate.NoRouteIn|Blackprint.InitUpdate.NoInputCable,_UpperCase));
//# sourceMappingURL=nodes-data.mjs.map