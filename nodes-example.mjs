/* Blackprint 
 MIT Licensed */
"use strict";var _Class,_Class2,_Class3,_Class5,_Class6,_Class7,_Class8;function _classPrivateFieldLooseBase(t,e){if(!{}.hasOwnProperty.call(t,e))throw new TypeError("attempted to use private field on non-instance");return t}var id=0;function _classPrivateFieldLooseKey(t){return"__private_"+id+++"_"+t}if(void 0===window)var window=globalThis;async function imports(t){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(t):Promise.all(t.map(t=>import(t)))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasInterface:!0}),Context=Blackprint.createContext("Example");Context.EventSlot={slot:"my-private-event-slot"};let consoleStyle="color: yellow";Context.log=function(t,...e){Blackprint.Environment.isBrowser?console.log(`%c${t}:`,consoleStyle,...e):console.log(`[1m[33m${t}:[0m`,...e)},Blackprint.registerNode("Example/Button/Simple",(_Class=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Example/Button").title="Button"}clicked(t){Context.log("Example/Button/Simple","I got ",t,"time to trigger to the other node"),this.output.Clicked(t),this.syncOut("click",!0)}syncIn(t,e){"click"===t&&this.clicked()}},_Class.output={Clicked:Blackprint.Types.Trigger},_Class)),Blackprint.registerInterface("BPIC/Example/Button",Context.IFace.Button=class extends Blackprint.Interface{clicked(t){Context.log("BPIC/Example/Button (non-HTML)","'Trigger' button clicked, going to run the handler"),this.node.clicked?.(t)}}),Blackprint.registerNode("Example/Input/Simple",(_Class2=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Example/Input").title="Input"}imported(t){let e=this.iface;Context.log("Example/Input/Simple","Old data:",JSON.stringify(e.data)),Context.log("Example/Input/Simple","Imported data:",JSON.stringify(t)),void 0!==t&&(Object.assign(e.data,t),this.output.Value=t.value)}syncIn(t,e){"data"===t?Object.assign(this.iface.data,e):"value"===t&&(this.iface.data.value=e)}},_Class2.output={Changed:Blackprint.Types.Trigger,Value:String},_Class2)),Blackprint.registerInterface("BPIC/Example/Input",Context.IFace.Input=class extends Blackprint.Interface{constructor(t){super(t),this.data=new ExampleInputData(this)}changed(t,e){let a=this.node;!1===this.importing&&(Context.log("Example/Input/Simple","The input box have new value:",t),a.output.Value=this.data.value,a.syncOut("data",{value:this.data.value}),a.output.Changed())}});var _iface=_classPrivateFieldLooseKey("iface"),_value=_classPrivateFieldLooseKey("value");class ExampleInputData{constructor(t){Object.defineProperty(this,_iface,{writable:!0,value:null}),Object.defineProperty(this,_value,{writable:!0,value:""}),_classPrivateFieldLooseBase(this,_iface)[_iface]=t}get value(){return _classPrivateFieldLooseBase(this,_value)[_value]}set value(t){_classPrivateFieldLooseBase(this,_value)[_value]!==t&&(_classPrivateFieldLooseBase(this,_value)[_value]=t,_classPrivateFieldLooseBase(this,_iface)[_iface].changed(t),_classPrivateFieldLooseBase(this,_iface)[_iface].node.routes.routeOut())}}Blackprint.utils.setEnumerablePrototype(ExampleInputData,{value:!0}),Blackprint.registerNode("Example/Display/Logger",(_Class3=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface("BPIC/Example/Logger");e.title="Logger",e.description="Print anything into text"}_refreshLogger(t){if(this.ref.IInput.Any.cables.length>1)this.iface.log=JSON.stringify(t);else{let t=this.ref.Input.Any?.[0];this.iface.log=null===t?"null":void 0===t?"undefined":"object"==typeof t?JSON.stringify(t):t}}init(){this.iface.on("cable.disconnect",Context.EventSlot,()=>{Context.log("Logger ("+(this.iface.id||"")+")","A cable was changed on Logger, manual update will be triggered"),this.update()}),this.iface.input.Any.on("value",Context.EventSlot,({target:t})=>{Context.log("Logger ("+(this.iface.id||"")+")",`I connected to port ${t.name} (${t.iface.namespace}), that have value: ${t.value}`)})}update(){let{Input:t}=this.ref;this._refreshLogger(t.Any)}syncIn(t,e){"log"===t&&(this.iface.log=e)}},_Class3.input={Any:Blackprint.Port.ArrayOf(Blackprint.Types.Any)},_Class3)),Blackprint.registerInterface("BPIC/Example/Logger",Context.IFace.Logger=class extends Blackprint.Interface{constructor(...t){super(...t),this._log="..."}get log(){return this._log}set log(t){this._log=t,Context.log("Logger ("+(this.id||"")+") Data",t),this.node.syncOut("log",t)}}),Blackprint.registerNode("Example/Math/Multiply",((_Class5=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Multiply",setTimeout(function(){Blackprint.Environment.isBrowser&&(void 0===e.x?console.log("Node from Engine:",e):console.log("Node from Sketch:",e))},10)}multiply(){let t=this.input;return Context.log("Example/Math/Multiply","Multiplying",t.A,"with",t.B),t.A*t.B}update(){this.iface._inactive_||(this.output.Result=this.multiply())}init(){let t=this.iface;t.on("cable.connect",Context.EventSlot,function({port:t,target:e}){Context.log("Example/Math/Multiply",`Cable connected from ${t.iface.title} (${t.name}) to ${e.iface.title} (${e.name})`)}),t._inactive_=t.$decoration?.warn("Need activation")||!0}}).output={Result:Number},_Class5.input={Exec:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.output.Result=e.multiply(),Context.log("Example/Math/Multiply","Result has been set:",e.output.Result),t._inactive_&&(t._inactive_.destroy?.(),t._inactive_=!1)}),A:Number,B:Blackprint.Types.Any},_Class5)),Blackprint.registerNode("Example/Math/Random",((_Class6=class extends Blackprint.Node{constructor(t){super(t),this.executed=!1;let e=this.setInterface();e.title="Random",e.description="Number (0-100)"}request(t){if(!0===this.executed)return!1;Context.log("Example/Math/Random","Value request for port:",t.output.name,"from node:",t.input.iface.title),this.input["Re-seed"]()}}).output={Out:Number},_Class6.input={"Re-seed":Blackprint.Port.Trigger(function({iface:{node:t}}){t.executed=!0,t.output.Out=Math.round(100*Math.random())})},_Class6)),Blackprint.registerNode("Example/Dummy/Test",((_Class7=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Do nothing"}}).input={"Input 1":Boolean,"Input 2":String},_Class7.output={"Output 1":Object,"Output 2":Number},_Class7)),Blackprint.registerNode("Example/Dummy/UpdateTest",((_Class8=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Pass data only"}update(){this.iface.id||this.instance.ifaceList.indexOf(this.iface);this.output.B1=this.input.A1,this.output.B2=this.input.A2}}).input={A1:String,A2:String},_Class8.output={B1:String,B2:String},_Class8));
//# sourceMappingURL=nodes-example.mjs.map