{"version":3,"names":["window","templates","_$_","sf","dom","$","__tmplt","_sf_internal","body_map","_replace","path","html","h","this","remove","reinitViews","append","document","body","apply","arguments","prepend","Blackprint","loadScope","url","Context","getContext","Sketch","registerInterface","IFace","constructor","node","super","leftPortMargin","rightPortMargin","init","el"],"sources":["nodes/FlowControl/_init.sf","nodes/FlowControl/Interface.sf"],"sourcesContent":["## js-global\n// Because .js and .sf is separated\n// we also need to call loadScope just like _init.js\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Use sQuery\nlet $ = sf.$;\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('FlowControl');\n\n## scss-global\nsf-space[blackprint] .nodes .node.flow-control {\n\t.header{\n\t\tbox-shadow: inset 0 0 3px #4e4e4e;\n    \tbackground: linear-gradient(120deg, rgba(175, 175, 175, 0.7) 0%, rgba(0, 0, 0, 0.2) 80%, rgba(0, 0, 0, 0.1) 100%);\n\t}\n\n\t.icon {\n\t\tmargin-right: 5px;\n\t}\n}","## html\n<div class=\"node {{ type }}\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n\t<div class=\"left-port\" style=\"margin: {{ leftPortMargin }}px\">\n\t  <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n\t</div>\n\n\t<div class=\"right-port\" style=\"margin: {{ rightPortMargin }}px\">\n\t  <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n\t</div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nbpic-flowcontrol-interface {\n\t.right-port {\n\t\t// margin-top: 36px;\n\t}\n}\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/FlowControl/Interface',\nclass extends Context.IFace['Interface'] {\n\tconstructor(node){\n\t\tsuper(node);\n\n\t\tthis.leftPortMargin = '';\n\t\tthis.rightPortMargin = '';\n\t}\n\tinit(el){\n\t\t$('.title .icon', el).prepend('<i class=\"fa fa-sign-in-alt\"></i>');\n\t}\n});"],"mappings":"8HACAA,EAAAC,YAAAD,EAAAC,UAAA,QAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAC,EAAAN,EAAAC,UAAAD,EAAAO,aAAAP,EAAAO,cAAA,CAAAC,SAAA,GAAAC,SAAAC,EAAAC,GAAA,IAAAC,EAAAV,EAAAS,GAAA,OAAAE,KAAAL,SAAAE,IAAAG,KAAAL,SAAAE,GAAAI,SAAAD,KAAAE,aAAAF,KAAAE,YAAAH,GAAAC,KAAAL,SAAAE,GAAAE,CAAA,EAAAI,OAAAN,EAAAC,GAAAT,EAAAe,SAAAC,MAAAF,OAAAH,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,EAAAC,QAAAX,EAAAC,GAAAT,EAAAe,SAAAC,MAAAG,QAAAR,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,GAEA,IAAAE,EAAAtB,EAAAsB,WAAAC,UAAA,CAGAC,sBAIAnB,EAAAF,GAAAE,EAGAoB,QAAAH,EAAAI,WAAA,e,6nBCaAJ,EAAAK,OAAAC,kBAAA,6BACA,cAAAH,EAAAI,MAAA,UACAC,YAAAC,GACAC,MAAAD,GAEAlB,KAAAoB,eAAA,GACApB,KAAAqB,gBAAA,EACA,CACAC,KAAAC,GACA/B,EAAA,eAAA+B,GAAAf,QAAA,oCACA,G","ignoreList":[]}