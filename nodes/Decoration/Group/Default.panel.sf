## html
<bppc-decoration-group-default>
	<div class="field title">
		<span class="name">Title:</span>
		<textarea sf-bind="title" placeholder="Add title here..."></textarea>
	</div>
	<div class="field textContent">
		<span class="name">Text Content:</span>
		<textarea sf-bind="textContent" placeholder="Add text content here..."></textarea>
	</div>
	<div class="field color-pick color-1">
		<span class="name">Background Color:</span>
		<input sf-bind="color" placeholder="#b8b8ff">
	</div>
	<div class="field color-pick color-2">
		<span class="name">Font Color:</span>
		<input sf-bind="fontColor" placeholder="#b8b8ff">
	</div>
</bppc-decoration-group-default>

## scss-global
bppc-decoration-group-default {
	.color-pick{
		.clr-field button{
			border-radius: 100%;
			height: 22px;
			width: 22px;
		}
	}

	.clr-field{
		width: 98%;
	}

	.title textarea:focus {
		box-shadow: 0 0 8px 1px white;
	}
}

## js-global
Blackprint.space.component('bppc-decoration-group-default', {template: #this.path},
class extends sf.Model {
	constructor(scope, iface){
		super(scope, iface);

		this.iface = iface;
		this.data = iface.data;
	}

	init(){
		let opt = {
			themeMode: 'dark',
			format: 'hex',
      		clearButton: true,
			defaultColor: '#b8b8ffe1',
			alpha: false,
			swatches: [
				'#abffb0',
				'#ffee82',
				'#ff8282',
				'#82f9ff',
				'#8293ff',
				'#cb82ff',
				'#ff82f7',
				'#ffffff',
				'#969696',
			],
		};

		Coloris(Object.assign({ el: 'bppc-decoration-group-default .color-1 input' }, opt));
		Coloris(Object.assign({ el: 'bppc-decoration-group-default .color-2 input' }, opt));
	}

	get title(){ return this.data.title }
	set title(val){
		this.data.title = val;
		this.iface.node.syncOut('title', val);
	}

	get textContent(){ return this.data.textContent }
	set textContent(val){
		this.data.textContent = val;
		this.iface.node.syncOut('textContent', val);
	}

	get color(){ return this.data.color }
	set color(val){
		this.data.color = val;
		this.iface.node.syncOut('color', val);
	}

	get fontColor(){ return this.data.fontColor }
	set fontColor(val){
		this.data.fontColor = val;
		this.iface.node.syncOut('fontColor', val);
	}
});