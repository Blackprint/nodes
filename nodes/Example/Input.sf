## html
<div class="node input" style="transform: translate({{ x }}px, {{ y }}px)">
  <sf-template path="Blackprint/nodes/template/header.sf"></sf-template>

  <div class="content">
    <textarea sf-bind="data.value" @input="textChanged(event)"></textarea>

    <div class="right-port">
      <sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
    </div>
  </div>

  <sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>

## scss-global
bpic-example-input{
	textarea{
		width: 100px;
	}
}

## js-global
// Register Sketch Interface
// This Interface will extends Interface from Button.js
// and add additional feature to control the User Interface for Sketch Editor
Blackprint.Sketch.registerInterface('BPIC/Example/Input',
class InputIFace extends Context.IFace.Input {
	constructor(node){
		super(node);

		let iface = this;
		let waitRepaint = false;

		// iface.data already being constructed fro Input.js
		// Let's just attach an two way binding event listener
		// Two way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding

		// Listener for two way binding when value from HTML input element is being received by the framework
		// I'm using this for auto scale the width/height of the textarea
		iface.data.on$value = function(now){
			if(waitRepaint) return;

			waitRepaint = true;
			$.afterRepaint().then(function(){
				waitRepaint = false;

				// Scale the input box depend on character length
				var el = iface.$el('textarea');

				// Skip if textarea was larger than our auto control
				// I mean, if user have change the size manually
				if(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)
					return;

				if(now.length < 8)
					el.attr('style', '');
				else if(now.length >= 8 && now.length < 14)
					el.attr('style', 'width:'+(10*now.length)+'px');
				else if(now.length >= 14)
					el.attr('style', 'width:140px;height:50px');
			});
		}
	}

	// Event callback from @input
	textChanged(ev){
		// Do nothing, this is just an example
		// console.log("Got Input:", ev);
	}
});