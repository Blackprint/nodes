!async function(e,t){"use strict";async function a(e){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(e):Promise.all(e.map(e=>import(e)))}t.exports&&t.exports!==globalThis&&Object.defineProperty(t.exports,"__esModule",{value:!0}),a.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null},e.templates||(e.templates={});var s=sf.dom||sf.$,p=e.templates;e._sf_internal=e._sf_internal||{body_map:{},_replace(e,t){let a=s(t);return this.body_map[e]&&this.body_map[e].remove(),this.reinitViews&&this.reinitViews(a),this.body_map[e]=a},append(e,t){s(document.body).append(this._replace.apply(this,arguments))},prepend(e,t){s(document.body).prepend(this._replace.apply(this,arguments))}};await a.task();let n=e.Blackprint.loadScope({url:import.meta.url}),o=await n.getContext("Data");p["BPIC/Data/Object/Get/Value.sf"]='<div class="node" style="transform: translate({{x}}px, {{y}}px)"><sf-template path="Blackprint/nodes/template/routes.sf"></sf-template><sf-template path="Blackprint/nodes/template/header.sf"></sf-template><div class="content"><input style="display: {{node.hasFieldData || node.hasFieldCable ? \'none\' : \'\'}}" sf-bind="data.props" placeholder="Type the properties here..."><div class="left-port"><sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template></div><div class="right-port"><sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template></div></div><sf-template path="Blackprint/nodes/template/other.sf"></sf-template></div>',n.Sketch.registerInterface("BPIC/Data/Object/Get/Value",class extends o.IFace.GetValue{}),p["BPIC/Data/Minimal.sf"]='<div :class="node {{showPortName ? \'show-port-name\' : \'\'}}" style="transform:translate({{x}}px,{{y}}px)"><sf-template path="Blackprint/nodes/template/routes.sf"></sf-template><div class="content"><div class="left-port"><sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template></div><div class="center port-{{_portLen}}" @contextmenu.stopall.prevent="nodeMenu(event)" @dragmove="moveNode(event)" @pointerdown="swapZIndex(event)" @pointerover="nodeHovered(event)" @pointerout="nodeUnhovered(event)"></div><div class="right-port"><sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template></div></div><sf-template path="Blackprint/nodes/template/other.sf"></sf-template></div>',n.Sketch.registerInterface("BPIC/Data/Minimal",class extends o.IFace.DataMinimal{constructor(e){super(e),this.showPortName=!1,this._portLen=0}init(e){this.initClone(e);let t=this.input;for(let e in t)this._portLen++}initClone(e){let t=$(".center",e);null!=t[0]&&t.append(this.node.createIcon())}})}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:this,"undefined"!=typeof module?module:{exports:this});
//# sourceMappingURL=nodes-data.sf.mjs.map