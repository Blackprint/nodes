/* Blackprint 
 MIT Licensed */
"use strict";var _Class,_KeyboardNode,_MouseNode,_MouseScrollNode,_PointerMovementNode,_Class2,_FileNode,_SliderBoxNode,_Class3;function _classPrivateFieldLooseBase(t,e){if(!{}.hasOwnProperty.call(t,e))throw new TypeError("attempted to use private field on non-instance");return t}var id=0;function _classPrivateFieldLooseKey(t){return"__private_"+id+++"_"+t}if(void 0===window)var window=globalThis;async function imports(t){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(t):Promise.all(t.map(t=>import(t)))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasInterface:!0,hasDocs:!0}),Context=Blackprint.createContext("Input");Context.EventSlot={slot:"my-private-event-slot"};let objLength=Context.objLength=function(t){var e=0;for(var n in t)e++;return e},_fType={},fType=function(t){if(null==_fType[t]){let e=_fType[t]=class{};Object.defineProperty(e,"name",{value:t})}return _fType[t]};var{HTMLElement:HTMLElement=fType("HTMLElement"),Event:Event=fType("Event"),KeyboardEvent:KeyboardEvent=fType("KeyboardEvent"),PointerEvent:PointerEvent=fType("PointerEvent"),TouchEvent:TouchEvent=fType("TouchEvent"),MouseEvent:MouseEvent=fType("MouseEvent")}=window;let Blob=window.Blob;void 0===Blob&&(Blob=(await import("node:buffer")).Blob);let allWindow=window.sf?.Window??window.document;var[$]=await Blackprint.DepsLoader.js({window:["sf.$"],cdn:["https://cdn.jsdelivr.net/npm/scarletsframe@0.35.x/dist/squery.min.js"]});Blackprint.registerCode("Input/Keyboard",((_Class=class extends Blackprint.Code{js(t){let{keys:e}=this.iface.data,n={};return e.forEach(t=>n[t]=Boolean),{type:Blackprint.CodeType.Callback,selfRun:!0,addOutput:n,code:"\n\t\t\t\tfunction onKeyboard(ev){\n\t\t\t\t\tif(ev.type === 'keydown'){\n\t\t\t\t\t\tOutput.Pressed = ev;\n\t\t\t\t\t\tOutput.Released = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if(ev.type === 'keyup'){\n\t\t\t\t\t\tOutput.Pressed = null;\n\t\t\t\t\t\tOutput.Released = ev;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(ev.code in Output)\n\t\t\t\t\t\tOutput[ev.code] = ev.type === 'keydown';\n\n\t\t\t\t\tRoute.Out();\n\t\t\t\t}\n\n\t\t\t\tInput.Listen = function(){\n\t\t\t\t\tlet temp = Input.Element || window;\n\t\t\t\t\ttemp.addEventListener('keydown', onKeyboard);\n\t\t\t\t\ttemp.addEventListener('keyup', onKeyboard);\n\t\t\t\t}\n\n\t\t\t\tInput.Unlisten = function(){\n\t\t\t\t\tlet temp = Input.Element || window;\n\t\t\t\t\ttemp.removeEventListener('keydown', onKeyboard);\n\t\t\t\t\ttemp.removeEventListener('keyup', onKeyboard);\n\t\t\t\t}\n\n\t\t\t\tInput.Listen();\n\t\t\t"}}}).routeIn=Blackprint.CodeRoute.Optional,_Class.routeOut=Blackprint.CodeRoute.Optional,_Class)),Blackprint.registerNode("Input/Keyboard",((_KeyboardNode=class extends Blackprint.Node{constructor(t){super(t),this._onKeyboard=null,this._onKeyboardEl=null;let e=this.setInterface();e.title="Keyboard Event",e.description="Listening to window",e.type="event",e.data={keys:[]},this.enabled=!0}onKeyboard(t){let{Output:e}=this.ref;t.view===window&&("keydown"===t.type?e.Pressed=t:"keyup"===t.type&&(e.Released=t),t.code in e&&("keydown"===t.type?e[t.code]=!0:"keyup"===t.type&&(e[t.code]=!1)),null!=this.routes.out&&this.routes.routeOut())}initPorts(t){let e=this.iface;Object.assign(e.data,t);let{keys:n}=e.data;for(var o=0;o<n.length;o++)this.createPort("output",n[o],Boolean)}waitKeyToBeListened(t){let e=this,n=this.iface,{keys:o}=n.data,i=n.$decoration.warn("Press any key...");this._waiting=function(n){if(o.includes(n.code))return void(i.text="The key is already being used");let l=o.indexOf("[?]");-1!==l?o.splice(l,1,n.code):o.push(n.code),e.renamePort("output",t.name,n.code),i.destroy(),$(allWindow).off("keydown",e._waiting),e._waiting=null},this._waiting.toast=i,$(allWindow).on("keydown",this._waiting)}init(){this.update();let t=this,e=this.iface,{keys:n}=e.data;var o=[{title:"Create new port",callback(){if(null!=t._waiting)return;let e=t.createPort("output","[?]",Boolean);t.waitKeyToBeListened(e),t.notifyEditorDataChanged()}},{title:"Change this port",callback(){let e=n.indexOf(this.name);-1!==e&&n.splice(e,1),t.renamePort("output",this.name,"[?]"),t.waitKeyToBeListened(this),t.notifyEditorDataChanged()}},{title:"Delete this port",callback(){null!=t._waiting&&($(allWindow).off("keydown",t._waiting),t._waiting.toast.destroy(),t._waiting=null,"[?]"!==this.name&&t.removePort("output","[?]")),t.deletePort("output",this.name);let e=n.indexOf(this.name);-1!==e&&n.splice(e,1),t.notifyEditorDataChanged()}}];e.on("port.menu",Context.EventSlot,function({port:t,menu:e}){if("output"!==t.source)return;let n;n="Pressed"===t.name||"Released"===t.name?[o[0]]:o.slice(0);for(var i=0;i<n.length;i++)n[i].context=t;e.push(...n)}),e.on("cable.disconnect",({port:t})=>"Element"===t.name&&this.update())}update(){let{Input:t}=this.ref;null!=this._onKeyboard&&($(this._onKeyboardEl??allWindow).off("keydown",this._onKeyboard).off("keyup",this._onKeyboard),this._onKeyboardEl=null),this._onKeyboard=t=>this.onKeyboard(t);let e=t.Element??allWindow;this.iface.description=e===allWindow?"Listening to window":"Listening to element",this.enabled?($(e).on("keydown",this._onKeyboard).on("keyup",this._onKeyboard),this._onKeyboardEl=e):this.iface.description="Not listening"}destroy(){null!=this._onKeyboard&&($(this._onKeyboardEl??allWindow).off("keydown",this._onKeyboard).off("keyup",this._onKeyboard),this._onKeyboardEl=null)}}).input={Element:HTMLElement,Listen:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!0,e.update()}),Unlisten:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!1,e.update()})},_KeyboardNode.output={Pressed:KeyboardEvent,Released:KeyboardEvent},_KeyboardNode)),Blackprint.registerNode("Input/Pointer/MouseClick",((_MouseNode=class extends Blackprint.Node{constructor(t){super(t),this._onClick=null,this._onClickEl=null;let e=this.setInterface();e.title="Mouse Click Event",e.description="Listening to window",e.type="event",this.enabled=!0}init(){this.update(),this.iface.on("cable.disconnect",({port:t})=>{"Element"===t.name&&(this.update(),this.routes.routeOut())})}update(){let{Input:t}=this.ref;if(null!=this._onClick){$(this._onClickEl??allWindow).off("pointerdown",this._onClick).off("pointerup",this._onClick),this._onClickEl=null}this._onClick=t=>this.onClick(t);let e=t.Element??allWindow;this.iface.description=e===allWindow?"Listening to window":"Listening to element",this.enabled?($(e).on("pointerdown",this._onClick).on("pointerup",this._onClick),this._onClickEl=e):this.iface.description="Not listening"}onClick(t,e){let{Output:n}=this.ref;t.view===window&&("pointerup"===t.type?(n.Release=t,0===t.button?n.Left=!1:1===t.button?n.Middle=!1:2===t.button?n.Right=!1:3===t.button?n["4th"]=!1:4===t.button&&(n["5th"]=!1)):"pointerdown"===t.type&&(n.Pressed=t,0===t.button?n.Left=!0:1===t.button?n.Middle=!0:2===t.button?n.Right=!0:3===t.button?n["4th"]=!0:4===t.button&&(n["5th"]=!0)),this.routes.routeOut(),e||this.syncOut(t.type,t.button))}syncIn(t,e){this.onClick({type:t,button:e},!0)}destroy(){if(null!=this._onClick){$(this._onClickEl??allWindow).off("pointerdown",this._onClick).off("pointerup",this._onClick),this._onClickEl=null}}}).input={Element:HTMLElement,Listen:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!0,e.update()}),Unlisten:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!1,e.update()})},_MouseNode.output={Pressed:Blackprint.Port.Union([PointerEvent,TouchEvent,MouseEvent]),Release:Blackprint.Port.Union([PointerEvent,TouchEvent,MouseEvent]),Left:Boolean,Middle:Boolean,Right:Boolean,"4th":Boolean,"5th":Boolean},_MouseNode)),Blackprint.registerNode("Input/Pointer/MouseScroll",((_MouseScrollNode=class extends Blackprint.Node{constructor(t){super(t),this._onScroll=null,this._onScrollEl=null;let e=this.setInterface();e.title="Mouse Scroll Event",e.description="Listening to window",e.type="event",this.enabled=!0}init(){this.update(),this.iface.on("cable.disconnect",({port:t})=>{"Element"===t.name&&(this.update(),this.routes.routeOut())})}update(){let{Input:t}=this.ref;null!=this._onScroll&&($(this._onScrollEl??allWindow).off("wheel",this._onScroll),this._onScrollEl=null),this._onScroll=t=>this.onScroll(t);let e=t.Element??allWindow;this.iface.description=e===allWindow?"Listening to window":"Listening to element",this.enabled?($(e).on("wheel",this._onScroll),this._onScrollEl=e):this.iface.description="Not listening"}onScroll(t,e){t.view===window&&(this.ref.Output.Event=t,this.routes.routeOut(),e||this.syncOut("wheel",{dx:t.deltaX,dy:t.deltaY,dz:t.deltaZ,dm:t.deltaMode}))}syncIn(t,e){this.onScroll(new WheelEvent("wheel",{deltaX:e.dx,deltaY:e.dy,deltaZ:e.dz,deltaMode:e.dm}),!0)}destroy(){null!=this._onScroll&&($(this._onScrollEl??allWindow).off("wheel",this._onScroll),this._onScrollEl=null)}}).input={Element:HTMLElement,Listen:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!0,e.update()}),Unlisten:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!1,e.update()})},_MouseScrollNode.output={Event:Blackprint.Port.StructOf(Event,{X:{type:Number,field:"deltaX"},Y:{type:Number,field:"deltaY"},Z:{type:Number,field:"deltaZ"}})},_MouseScrollNode)),Blackprint.registerNode("Input/Pointer/Movement",((_PointerMovementNode=class extends Blackprint.Node{constructor(t){super(t),this._onMove=null,this._onMoveEl=null;let e=this.setInterface();e.title="Pointer Move Event",e.description="Listening to window",e.type="event",this.enabled=!0}init(){this.update(),this.iface.on("cable.disconnect",({port:t})=>{"Element"===t.name&&(this.update(),this.routes.routeOut())})}update(){let{Input:t}=this.ref;null!=this._onMove&&($(this._onMoveEl??allWindow).off("pointermove",this._onMove),this._onMoveEl=null),this._onMove=t=>this.onMove(t);let e=t.Element??allWindow;this.iface.description=e===allWindow?"Listening to window":"Listening to element",this.enabled?($(e).on("pointermove",this._onMove),this._onMoveEl=e):this.iface.description="Not listening"}onMove(t){t.view===window&&(this.ref.Output.Event=t,this.routes.routeOut())}destroy(){null!=this._onMove&&($(this._onMoveEl??allWindow).off("pointermove",this._onMove),this._onMoveEl=null)}}).input={Element:HTMLElement,Listen:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!0,e.update()}),Unlisten:Blackprint.Port.Trigger(function({iface:t}){let e=t.node;e.enabled=!1,e.update()})},_PointerMovementNode.output={Event:Blackprint.Port.StructOf(Event,{MoveX:{type:Number,field:"moveX"},MoveY:{type:Number,field:"moveY"},ClientX:{type:Number,field:"clientX"},ClientY:{type:Number,field:"clientY"},ScreenX:{type:Number,field:"screenX"},ScreenY:{type:Number,field:"screenY"}})},_PointerMovementNode)),Blackprint.registerNode("Input/UI/Button",((_Class2=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Input/UI/Button").title="Button"}syncIn(t,e){"clicked"===t&&this.output.Clicked()}}).output={Clicked:Blackprint.Types.Trigger},_Class2)),Blackprint.registerInterface("BPIC/Input/UI/Button",Context.IFace.Button=class extends Blackprint.Interface{clicked(t){this.node.output.Clicked(),this.node.syncOut("clicked")}}),Blackprint.registerNode("Input/UI/File",((_FileNode=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Input/UI/File").title="File loader"}}).output={URL:String,Blob:Blob},_FileNode)),Blackprint.registerInterface("BPIC/Input/UI/File",Context.IFace.File=class extends Blackprint.Interface{constructor(t){super(t),this.file=null,this.name="";let e=this.inputEl=document.createElement("input");e.type="file";let n=this;e.addEventListener("input",function(){n.setFile(n.inputEl.files[0])})}setFile(t){this.name=t.name;let e=this.node;e.output.Blob=t,URL.revokeObjectURL(e.output.URL),e.output.URL=URL.createObjectURL(t),e.routes.routeOut()}browseFile(t){this.inputEl.click()}}),Blackprint.registerNode("Input/UI/SliderBox",((_SliderBoxNode=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Input/UI/SliderBox").title="Slider Box"}imported(t){if(void 0===t)return;let e=this,n=this.iface;Object.assign(n.data[0],t[0]),e.output[0]=t[0].value;var o=objLength(t);if(1!==o)for(var i=1;i<o;i++){n.createPort();let o=i+"";var l=t[o];Object.assign(n.data[i],l),e.createPort("output",i,Number),e.output[o]=l.value}}init(){let t=this,e=this.iface;var n=[{title:"Create port",callback(){t.createPort("output",e.data.length,Number),e.createPort()}},{title:"Delete last port",callback(){var n=e.data.length;1!==n&&(t.deletePort("output",n-1),e.data.pop())}}];e.on("port.menu",Context.EventSlot,function({port:t,menu:e}){for(var o=0;o<n.length;o++){let i=n[o];i.context=t,e.push(i)}})}syncIn(t,e){if("data"===t){let t=this.iface;Object.assign(t.data,e);for(var n=0;n<e.length;n++)t.changed(n,e[n].value)}}}).output={0:Blackprint.Port.Default(Number,0)},_SliderBoxNode)),Blackprint.registerInterface("BPIC/Input/UI/SliderBox",Context.IFace.SliderBoxIFace=class extends Blackprint.Interface{constructor(t){super(t),this.focusIndex=void 0,this.data=[],this.createPort()}changed(t,e){let n=this.node;n.output[t]=e,n.routes.routeOut(),n.syncOut("data",this.data)}valueListener(t){t=t>this.max?this.max:t<this.min?this.min:Math.round(100*t)/100;let e=this._iface;return clearTimeout(this._wait),this._wait=setTimeout(()=>e.changed(e.focusIndex,t),1),this.node.notifyEditorDataChanged(),t}createPort(){this.data.push({value:0,min:-100,max:100,step:.1,_iface:this,on$value:this.valueListener}),this.node.notifyEditorDataChanged()}}),Blackprint.registerNode("Input/UI/TextBox",(_Class3=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Input/UI/TextBox").title="Input"}imported(t){let e=this.iface;void 0!==t&&(Object.assign(e.data,t),this.output.Value=t.value)}changed(t,e){let n=this.iface;!1===n.importing&&(this.output.Value=n.data.value,this.syncOut("data",{value:n.data.value}),this.output.Changed())}syncIn(t,e){"data"===t&&(Object.assign(this.iface.data,e),this.changed())}},_Class3.output={Changed:Blackprint.Types.Trigger,Value:String},_Class3)),Blackprint.registerInterface("BPIC/Input/UI/TextBox",Context.IFace.Input=class extends Blackprint.Interface{constructor(t){super(t),this.data=new InputTextBoxData(this)}});var _iface=_classPrivateFieldLooseKey("iface"),_value=_classPrivateFieldLooseKey("value");class InputTextBoxData{constructor(t){Object.defineProperty(this,_iface,{writable:!0,value:null}),Object.defineProperty(this,_value,{writable:!0,value:""}),_classPrivateFieldLooseBase(this,_iface)[_iface]=t}get value(){return _classPrivateFieldLooseBase(this,_value)[_value]}set value(t){if(_classPrivateFieldLooseBase(this,_value)[_value]===t)return;_classPrivateFieldLooseBase(this,_value)[_value]=t;let e=_classPrivateFieldLooseBase(this,_iface)[_iface].node;e.changed(t),e.routes.routeOut(),e.notifyEditorDataChanged()}}Blackprint.utils.setEnumerablePrototype(InputTextBoxData,{value:!0});
//# sourceMappingURL=nodes-input.mjs.map