/* Blackprint 
 MIT Licensed */
"use strict";var _Class,_GetReferenceNode,_Class2;if(void 0===window)var window=globalThis;async function imports(e){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(e):Promise.all(e.map(e=>import(e)))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasInterface:!0,hasDocs:!0}),Context=Blackprint.createContext("Console");Context.EventSlot={slot:"my-private-event-slot"},Blackprint.registerNode("Console/Breakpoint",((_Class=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Breakpoint"}init(){this.ref.IInput.Any.on("value",({cable:e})=>{let{value:t,output:n,input:o}=e})}update(){}routeIn(){}}).input={Any:Blackprint.Types.Any},_Class)),Blackprint.registerNode("Console/GetReference",((_GetReferenceNode=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Get Reference"}init(){let e=this;this.iface.input.Any.on("value",Context.EventSlot,function(){console.log("Ref >",e.input.Any)})}}).input={Any:Blackprint.Types.Any},_GetReferenceNode)),Blackprint.registerCode("Console/Log",class extends Blackprint.Code{js(e){return{code:"console.log(Input.Any);"}}python(e){return{code:"print(Input['Any'])"}}}),Blackprint.registerNode("Console/Log",((_Class2=class extends Blackprint.Node{constructor(e){super(e),this.setInterface("BPIC/Console/Log").title="Log"}_refreshLogger(e){let t=this.iface;if(Blackprint.Environment.isBrowser||console.log(e),this.ref.IInput.Any.cables.length>1)t.log=JSON.stringify(e);else{let e=this.ref.Input.Any?.[0];t.log=null===e?"null":void 0===e?"undefined":"object"==typeof e?JSON.stringify(e):e}}init(){let{Input:e}=this.ref;this.iface.on("cable.disconnect",Context.EventSlot,()=>{this._refreshLogger(e.Any)})}update(){let{Input:e}=this.ref;this._refreshLogger(e.Any)}syncIn(e,t){"log"===e&&(this.iface.log=t)}}).input={Any:Blackprint.Port.ArrayOf(Blackprint.Types.Any)},_Class2.interfaceSync=[{type:"text_out",id:"log",placeholder:"...",tooltip:"Output will written here"}],_Class2)),Blackprint.registerInterface("BPIC/Console/Log",Context.IFace.Logger=class extends Blackprint.Interface{constructor(...e){super(...e),this._log="..."}get log(){return this._log}set log(e){this._log=e,this.node.syncOut("log",e)}});
//# sourceMappingURL=nodes-console.mjs.map